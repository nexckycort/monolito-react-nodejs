{"version":3,"sources":["infrastructure/components/ui/Loader/Loader.module.scss","infrastructure/router.ts","infrastructure/components/ui/Container/Container.tsx","infrastructure/components/ui/Loader/Loader.tsx","infrastructure/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","appRoutes","title","path","component","lazy","a","allRoutes","AppRouting","routes","length","forEach","route","join","undefined","children","Reflect","deleteProperty","unshift","push","Container","className","el","Component","Loader","show","rootClassName","cn","s","loader","loaderShow","App","fallback","map","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","includes","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.118b4e58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__VXyJl\",\"loading\":\"Loader_loading__1P6gX\",\"loaderShow\":\"Loader_loaderShow__33CVe\",\"loaderTransparent\":\"Loader_loaderTransparent__2xhch\"};","import { lazy } from 'react'\r\n\r\nconst HomeView = lazy(async () => await import('infrastructure/pages/Home'))\r\n\r\ninterface Routes {\r\n  path: string\r\n  title: string\r\n  component: React.FC\r\n  children?: Routes[]\r\n}\r\n\r\nconst appRoutes: Routes[] = [\r\n  {\r\n    title: 'Home',\r\n    path: '/',\r\n    component: HomeView\r\n  }\r\n]\r\n\r\nconst allRoutes: any[] = []\r\nfunction AppRouting (routes = appRoutes, path = ''): Routes[] {\r\n  allRoutes.length = 0\r\n  routes.forEach(({ ...route }) => {\r\n    route.path = [path, route.path].join('')\r\n    if (route.children !== undefined) {\r\n      AppRouting(route.children, route.path)\r\n      Reflect.deleteProperty(route, 'children')\r\n      allRoutes.unshift(route)\r\n    } else {\r\n      allRoutes.push(route)\r\n    }\r\n  })\r\n  return allRoutes as Routes[]\r\n}\r\n\r\nexport default AppRouting\r\n","import React, { FC } from 'react'\r\n\r\ninterface Props {\r\n  className?: string\r\n  children?: any\r\n  el?: HTMLElement\r\n}\r\n\r\nconst Container: FC<Props> = ({ children, className, el = 'div' }) => {\r\n  const Component: React.ComponentType<React.HTMLAttributes<HTMLDivElement>> = el as any\r\n\r\n  return <Component className={className}>{children}</Component>\r\n}\r\n\r\nexport default Container\r\n","import React, { FC, HTMLAttributes } from 'react'\r\nimport cn from 'classnames'\r\n\r\nimport s from './Loader.module.scss'\r\n\r\ninterface Props extends HTMLAttributes<HTMLElement> {\r\n  show: boolean\r\n}\r\n\r\nconst Loader: FC<Props> = ({ children, show }) => {\r\n  const rootClassName = cn(s.loader, show ? s.loaderShow : '')\r\n\r\n  return <div className={rootClassName}>{children}</div>\r\n}\r\n\r\nexport default Loader\r\n","import { Suspense } from 'react'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nimport AppRouting from 'infrastructure/router'\r\n\r\nimport { Container, Loader } from 'infrastructure/components/ui'\r\n\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <Router>\r\n      <Suspense fallback={<Loader show />}>\r\n        <Switch>\r\n          <Container className=\"container\">\r\n            {AppRouting().map(({ path, component }) => (\r\n              <Route key={path} exact path={path} component={component} />\r\n            ))}\r\n          </Container>\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\ninterface Config {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register (config?: Config): void {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready\r\n          .then(() => {\r\n            console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://cra.link/PWA')\r\n          })\r\n          .catch(console.error)\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl: string, config?: Config): void {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller != null) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://cra.link/PWA.')\r\n\r\n              // Execute callback\r\n              if (config?.onUpdate != null) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config?.onSuccess != null) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl: string, config?: Config): void {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (response.status === 404 || (contentType != null && !contentType.includes('javascript'))) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready\r\n          .then((registration) => {\r\n            registration.unregister()\r\n              .then(() => {\r\n                window.location.reload()\r\n              })\r\n              .catch(console.error)\r\n          })\r\n          .catch(console.error)\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister (): void {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n          .catch(console.error)\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry != null && onPerfEntry instanceof Function) {\r\n    import('web-vitals')\r\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry)\r\n        getFID(onPerfEntry)\r\n        getFCP(onPerfEntry)\r\n        getLCP(onPerfEntry)\r\n        getTTFB(onPerfEntry)\r\n      })\r\n      .catch(console.error)\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from 'infrastructure/App'\r\n\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nimport 'index.scss'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register()\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}